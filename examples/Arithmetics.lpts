The PTS interpreter supports basic arithmetics.

> module Arithmetics;

There is a built-in type `Nat`.

> assert Nat : *;

Values of type `Nat` can be written as numeric literals.

> assert 0 : Nat;
> assert 1 : Nat;
> assert 123456789123456789123456789 : Nat;

The operations `add`, `sub`, `mul` and `div` can be used to
compute with numbers.

> assert add 1 2 : Nat = 3;
> assert sub 2 1 : Nat = 1;
> assert mul 2 3 : Nat = 6;
> assert div 4 2 : Nat = 2;

Values of type `Nat` can be negative.

> assert sub 1 2 : Nat = sub 2 3;
> assert add (sub 1 2) 1 : Nat = 0;

The result of division is rounded down to the nearest integral
value.

> assert div 6 1 : Nat = 6;
> assert div 6 2 : Nat = 3;
> assert div 6 3 : Nat = 2;
> assert div 6 4 : Nat = 1;
> assert div 6 5 : Nat = 1;
> assert div 6 6 : Nat = 1;
> assert div 6 7 : Nat = 0;
>
> assert div (sub 0 6) 1 : Nat = sub 0 6;
> assert div (sub 0 6) 2 : Nat = sub 0 3;
> assert div (sub 0 6) 3 : Nat = sub 0 2;
> assert div (sub 0 6) 4 : Nat = sub 0 2;
> assert div (sub 0 6) 5 : Nat = sub 0 2;
> assert div (sub 0 6) 6 : Nat = sub 0 1;
> assert div (sub 0 6) 7 : Nat = sub 0 1;

Normalization stops when encountering division by zero.

> assert div 5 (sub 2 2) : Nat = div 5 0;

Numbers can be compared to zero using the `if0 then else`
construct.

> assert if0 0 then 10 else 20 : Nat = 10;
> assert if0 1 then 10 else 20 : Nat = 20;
